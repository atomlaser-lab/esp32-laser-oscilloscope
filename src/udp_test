#include <Arduino.h>           // Framework
#include <SPI.h>
#include <WiFi.h>
#include <WiFiUdp.h>

#include <Ethernet.h>
#include <EthernetUdp.h>

#include <secrets.h> // in scr make a seacrets.h file and define the SSID and password MAke sure this is part of .gitignore


// Specify maximum UDP packet size
#define MAX_PACKET_SIZE 512

// Specify UDP port to listen on
unsigned int localPort = 9999;

// Create data array for storing the received UDP packet data payload
char packetData[MAX_PACKET_SIZE];

WiFiUDP Udp;

void setup() {
  // dac.begin(VSPI_CS);
  //  Serial port for debugging purposes
  Serial.begin(115200); // 115200 is baud rate (symbol communication rate)

  WiFi.disconnect();
  // WiFi.setAutoConnect(false);

  // Connect to existing network
  const char *ssid = SECRET_WIFI_SSID;   // set these in secrets.h
  const char *password = SECRET_WIFI_PASSWORD; // NULL if missing
  if (!ssid) {                                  // If password missing, will be assumed no password.
    Serial.println("Missing WiFi ssid.");
  }
  WiFi.mode(WIFI_STA);
  /*if (!WiFi.config(local_ip, gateway, subnet)) {
    Serial.println("IP config failed.");
  }*/
  if (password == NULL) { /*strcmp(password, "") == 0*/
    WiFi.begin(ssid);
  } else {
    WiFi.begin(ssid, password);
  }
  Serial.printf("Connecting to WiFi: %s.",ssid);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  // Print ESP Local IP Address
  Serial.print("\nConnected. Local IP Address: ");
  Serial.println(WiFi.localIP());

  WiFi.setAutoReconnect(true);

  //start UDP listen
  Udp.begin(localPort);


}

void loop() {
  
  // Process received packet
  int packetSize = Udp.parsePacket();

  if (packetSize > MAX_PACKET_SIZE)
  {
    packetSize = MAX_PACKET_SIZE;
  }

  // If a packet was received, send a response packet
  if (packetSize)
  {
    // Read the received UDP packet data
    Udp.read(packetData,MAX_PACKET_SIZE);
    //Serial.println(packetData);
    // Transmit an UDP packet back to the remote IP address and port specified in the received packet header
    // The transmitted UDP packet data byte values are the received values + 1
    Udp.beginPacket(Udp.remoteIP(), Udp.remotePort());    
    for (int i =0; i < packetSize; i++)
    {
      Udp.write(packetData[i]+1);
    }
    Udp.endPacket();    
  }
  delay(1);
}